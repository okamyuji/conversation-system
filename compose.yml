services:
  redis:
    image: redis:7.2-alpine
    container_name: conversation_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - conversation_network
    environment:
      - REDIS_REPLICATION_MODE=master
    sysctls:
      net.core.somaxconn: 1024

  conversation_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: conversation_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - conversation_data:/app/data
      - conversation_logs:/app/logs
      - ./conversations:/app/conversations # 会話ファイル保存用
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - DATA_DIR=/app/data
      - BACKUP_ENABLED=true
      - BACKUP_INTERVAL=3600 # 1時間ごとのバックアップ
    networks:
      - conversation_network
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import redis; r=redis.Redis(host='redis'); r.ping()",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # conversation_web:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.web
  #   container_name: conversation_web
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./web:/app
  #   depends_on:
  #     - conversation_app
  #   environment:
  #     - API_URL=http://conversation_app:8000
  #     - NODE_ENV=production
  #   networks:
  #     - conversation_network

  # backup_service:
  #   image: alpine:latest
  #   container_name: conversation_backup
  #   restart: unless-stopped
  #   volumes:
  #     - redis_data:/redis_data:ro
  #     - conversation_data:/app_data:ro
  #     - ./backups:/backups
  #   command: |
  #     sh -c "
  #     apk add --no-cache dcron redis
  #     echo '0 */6 * * * /usr/bin/redis-cli -h redis --rdb /backups/dump_\$(date +%Y%m%d_%H%M%S).rdb' > /var/spool/cron/crontabs/root
  #     echo '0 2 * * * tar -czf /backups/app_data_\$(date +%Y%m%d).tar.gz -C /app_data .' >> /var/spool/cron/crontabs/root
  #     echo '0 3 * * 0 find /backups -name \"*.rdb\" -mtime +7 -delete' >> /var/spool/cron/crontabs/root
  #     echo '0 3 * * 0 find /backups -name \"*.tar.gz\" -mtime +30 -delete' >> /var/spool/cron/crontabs/root
  #     crond -f -l 2
  #     "
  #   depends_on:
  #     - redis
  #   networks:
  #     - conversation_network

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  conversation_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/app
  conversation_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

networks:
  conversation_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
